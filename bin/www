#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('webrtc-node-app:server')//('webrtc-node-app:server');
const http = require('http');
const {Server} = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


const io = new Server(server)

io.on(
    'connection',
    (socket) => {
      socket.on('join', (roomId) => {
        const selectedRooms = io.sockets.adapter.rooms.get(roomId)
        const numberOfClients = selectedRooms ? selectedRooms.size : 0

        if (numberOfClients === 0) {
          console.log(`Creating room ${roomId} and emitting room_created socket event`)
          socket.join(roomId)
          socket.emit('room_created', roomId)
        }
        else if (numberOfClients === 1) {
          console.log(`Joining room ${roomId} and emitting room_created socket event`)
          socket.join(roomId)
          socket.emit('room_joined', roomId)
        }
        else {
          console.log(`Can't join ${roomId} emitting full_room socket event`)
          socket.emit('full_room', roomId)
        }
      })

      // These events are emitted to all the sockets connected to the same room except the sender
      socket.on('start_call', (roomId) => {
        console.log(`Broadcasting start_call event to peers in room ${roomId}`)
        socket.to(roomId).emit('start_call')
      })

      socket.on('webrtc_offer', (event) => {
        console.log(`Broadcasting webrtc_offer event to peers in room ${event.roomId}`)
        socket.to(event.roomId).emit('webrtc_offer', event.sdp)
      })

      socket.on('webrtc_answer', (event) => {
        console.log(`Broadcasting webrtc_answer event to peers in room ${event.roomId}`)
        socket.to(event.roomId).emit('webrtc_answer', event.sdp)
      })

      socket.on('webrtc_ice_candidate', (event) => {
        console.log(`Broadcasting webrtc_ice_candidate event to peers in room ${event.roomId}`)
        socket.to(event.roomId).emit('webrtc_ice_candidate', event)
      })
    }
)


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind + ', http://localhost:' + port);
}

